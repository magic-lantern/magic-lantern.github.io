<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Seth Russell</title>
    <link>/tags/r/</link>
    <description>Recent content in R on Seth Russell</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Mon, 15 Oct 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using Google Compute Engine as host for RStudio Server</title>
      <link>/2018/10/15/2018-10-15-using-google-compute-engine-as-host-for-rstudio-server/</link>
      <pubDate>Mon, 15 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/10/15/2018-10-15-using-google-compute-engine-as-host-for-rstudio-server/</guid>
      <description>&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Last updated November 30, 2018. This post is a work in progress.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.rstudio.com/products/rstudio-server-pro/&#34;&gt;RStudio Server&lt;/a&gt;  (&lt;a href=&#34;https://www.rstudio.com/products/rstudio/download-server/&#34;&gt;download&lt;/a&gt;), is feature comparable to the desktop software &lt;a href=&#34;https://www.rstudio.com/products/rstudio/&#34;&gt;RStudio IDE&lt;/a&gt;. RStudio Server is available under two different licensing models: &amp;ldquo;Open Source Edition: (AGPL v3), and &amp;ldquo;Commercial License.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Google Cloud has a wide range of services available. Everything from machine learning APIs to development environments to database as a service. However, one thing they don&amp;rsquo;t have is a good R environment for development of R packages or analysis. I&amp;rsquo;ve found the most flexible option to get a great R environment on Google Cloud is to use a Google Compute Engine instance (GCE) - Google&amp;rsquo;s cloud hosted virtual machine platform.&lt;/p&gt;

&lt;p&gt;In this post, I&amp;rsquo;ll be setting up the Open Source Edition of RStudio Server. Total estimated cost per month if the system is running 24x7: $202.68/month. Cost is much less if you only run the system as needed (business hours only would cost about $45/month)&lt;/p&gt;

&lt;p&gt;Steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create new GCE

&lt;ol&gt;
&lt;li&gt;Navigate to &lt;a href=&#34;https://console.cloud.google.com&#34;&gt;https://console.cloud.google.com&lt;/a&gt;. If you don&amp;rsquo;t already have an account, you can setup a free account with $300 credits for 365 days.&lt;/li&gt;
&lt;li&gt;From the navigation menu (top left), select &amp;ldquo;Compute Engine&amp;rdquo; (under &amp;lsquo;COMPUTE&amp;rsquo;) -&amp;gt; &amp;ldquo;VM Instances&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Click &amp;ldquo;CREATE INSTANCE&amp;rdquo; at the top of the page&lt;/li&gt;
&lt;li&gt;Name your instance as desired.&lt;/li&gt;
&lt;li&gt;Pcik desired zone. I selected us-central1 (as that zonehas GPU availability should I want that feature in the future)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Machine type&lt;/strong&gt;: I selected &lt;strong&gt;8 CPU 30GB RAM (n1-standard-8)&lt;/strong&gt; based on estimated resources needed. This host will support 6 Data Scientist; you can always scale this up or down as needed after VM creation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Boot Disk&lt;/strong&gt;: Click change - select &lt;strong&gt;Ubuntu 18.04 LTS minimal&lt;/strong&gt; - LTS minimal installs very few packages by default, keeping disk usage minimized. Most Linux distributions are free to use, but not all OSes are; some have an hourly charge.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Boot Disk&lt;/strong&gt;: Recommend setting size to 50GB and selecting &lt;strong&gt;Boot Disk Type&lt;/strong&gt; to SSD. While an SSD will cost $8/more per month than standard persistent disk when running 24x7, it also performs much better when using local files.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Firewall&lt;/strong&gt;: Check both boxes to allow HTTP and HTTPS traffic.&lt;/li&gt;
&lt;li&gt;Click &amp;ldquo;Create&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Static IP Address setup&lt;/strong&gt;:

&lt;ol&gt;
&lt;li&gt;Once machine is up (takes perhaps 30 seconds), click the machine name&lt;/li&gt;
&lt;li&gt;Scroll down to the &amp;ldquo;Network Interfaces&amp;rdquo; section and click &amp;ldquo;View Details&amp;rdquo; in the &amp;ldquo;Network Details&amp;rdquo; column.&lt;/li&gt;
&lt;li&gt;From the left menu &amp;ldquo;VPC Network&amp;rdquo;, select &amp;ldquo;External IP addresses&amp;rdquo;&lt;/li&gt;
&lt;li&gt;In the &amp;ldquo;Type&amp;rdquo; column, click the drop down to change from &amp;ldquo;Ephemeral&amp;rdquo; to &amp;ldquo;Static&amp;rdquo;. A static ip reservation results in a constant but small ongoing charge.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Basic machine setup: One the VM Instance page, in the &amp;ldquo;Connect&amp;rdquo; column, click &amp;ldquo;SSH&amp;rdquo;. Once the SSH window pops up, run these commands

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install htop tmux dialog vim lsof less&lt;/code&gt; This installs a few basic tools that I find to be helpful&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo adduser &amp;lt;name&amp;gt;&lt;/code&gt; Add users as appropriate. RStudio Server uses local accounts to control access to the web UI.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Install R and RStudio. I selected to install R 3.5.x by following instructions at &lt;a href=&#34;https://cran.rstudio.com/bin/linux/ubuntu/README.html&#34;&gt;https://cran.rstudio.com/bin/linux/ubuntu/README.html&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get update&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get upgrade&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;add this line to /etc/apt/sources.list: &lt;code&gt;deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install r-base r-base-dev pandoc gdebi-core git subversion texlive texlive-latex-extra&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wget https://download2.rstudio.org/rstudio-server-1.1.456-amd64.deb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo gdebi rstudio-server-1.1.456-amd64.deb&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Run R and install additional desired packages. &lt;em&gt;Note:&lt;/em&gt; Installing packages as root installs those packages for all uesrs.

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install libssl-dev libcurl4-openssl-dev libxml2-dev wget&lt;/code&gt; This fullfills some dependency requirements for desired packages.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo R&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;install.packages(c(&#39;tidyverse&#39;, &#39;bigrquery&#39;, &#39;devtools&#39;, &#39;shiny&#39;, &#39;caTools&#39;, &#39;bitops&#39;, &#39;dt&#39;))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Verify packages have been installed correctly: &lt;code&gt;require(&amp;quot;dplyr&amp;quot;)&lt;/code&gt; and &lt;code&gt;require(&#39;bigrquery&#39;)&lt;/code&gt; etc.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Install Nginx and add Let&amp;rsquo;s Encrypt SSL cert &lt;a href=&#34;https://certbot.eff.org/lets-encrypt/ubuntubionic-nginx&#34;&gt;https://certbot.eff.org/lets-encrypt/ubuntubionic-nginx&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install nginx software-properties-common&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo add-apt-repository ppa:certbot/certbot&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get update&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install python-certbot-nginx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create a new nginx configuration file by copying the default configuration:

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/rstudio-server&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Remove the default site from being served, but keep the configuration for reference: &lt;code&gt;sudo rm /etc/nginx/sites-enabled/default&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Make sure Nginx still works - &lt;code&gt;sudo systemctl restart nginx&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo certbot --nginx&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Setup Nginx to proxy RStudio Server via https port. Follow instructions similar to &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-configure-nginx-with-ssl-as-a-reverse-proxy-for-jenkins&#34;&gt;https://www.digitalocean.com/community/tutorials/how-to-configure-nginx-with-ssl-as-a-reverse-proxy-for-jenkins&lt;/a&gt; and &lt;a href=&#34;https://support.rstudio.com/hc/en-us/articles/200552326-Configuring-the-Server/&#34;&gt;https://support.rstudio.com/hc/en-us/articles/200552326-Configuring-the-Server/&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Modify the :443 portion to do the https proxy - this goes in a location{} section; the key lines are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;proxy_set_header        Host $host;
proxy_set_header        X-Real-IP $remote_addr;
proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header        X-Forwarded-Proto $scheme;
# adjust these two lines to match your RStudio Server port
proxy_pass          http://localhost:8787;
proxy_redirect      http://localhost:8787 $scheme://$http_host/;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In order to get the websockets component working, you need to modify /etc/nginx/nginx.conf and add the following section inside the http{} block:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;map $http_upgrade $connection_upgrade {
default upgrade;
&#39;&#39;      close;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the following lines to your server{} block:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;proxy_http_version 1.1;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $connection_upgrade;
proxy_read_timeout 7d; # want something long so websocket doesn&#39;t automatcailly close on user
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Symlink your &lt;code&gt;/etc/nginx/sites-available&lt;/code&gt; file to &lt;code&gt;/etc/nginx/sites-enabled&lt;/code&gt; sites-enabled is the directory that the nginx server will look in when starting up.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Optional Step: Force all http traffic to redirect to https (certbot can set this up for you if you want):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {
  if ($host = yourdomain.tld) {
      return 301 https://$host$request_uri;
  } # managed by Certbot
      
     listen 80 ;
     listen [::]:80 ;
  server_name yourdomain.tld;
  return 404; # managed by Certbot
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Resulting nginx configuration file should look like: &lt;a href=&#34;https://gist.github.com/magic-lantern/1b5e11c3cf5964b69e8e7824df015c5d&#34;&gt;https://gist.github.com/magic-lantern/1b5e11c3cf5964b69e8e7824df015c5d&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Before restarting nginx, test your configuration by running &lt;code&gt;nginx -t&lt;/code&gt;. Fix any errors before restarting with &lt;code&gt;systemctl restart nginx&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some URLs for additional information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;General setup: &lt;a href=&#34;https://towardsdatascience.com/running-jupyter-notebook-in-google-cloud-platform-in-15-min-61e16da34d52&#34;&gt;https://towardsdatascience.com/running-jupyter-notebook-in-google-cloud-platform-in-15-min-61e16da34d52&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Static IP Address: &lt;a href=&#34;https://cloud.google.com/compute/pricing?hl=en_US&amp;amp;_ga=2.8427253.-1719922974.1503442674#ipaddress&#34;&gt;https://cloud.google.com/compute/pricing?hl=en_US&amp;amp;_ga=2.8427253.-1719922974.1503442674#ipaddress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Network Tier Pricing: &lt;a href=&#34;https://cloud.google.com/network-tiers/pricing&#34;&gt;https://cloud.google.com/network-tiers/pricing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Nginx as a reverse proxy: &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-configure-nginx-with-ssl-as-a-reverse-proxy-for-jenkins&#34;&gt;https://www.digitalocean.com/community/tutorials/how-to-configure-nginx-with-ssl-as-a-reverse-proxy-for-jenkins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Starting and Stoping the RStudio Server Service: &lt;a href=&#34;https://support.rstudio.com/hc/en-us/articles/200532327-Managing-the-Server&#34;&gt;https://support.rstudio.com/hc/en-us/articles/200532327-Managing-the-Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;RStudio Server setup using PAM and Apache : &lt;a href=&#34;https://jstaf.github.io/2018/06/20/rstudio-server-semi-pro.html&#34;&gt;https://jstaf.github.io/2018/06/20/rstudio-server-semi-pro.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>How to profile your R code that calls C/C&#43;&#43; </title>
      <link>/2018/10/05/2018-10-05-how-to-profile-your-r-code-that-calls-c-c-plus-plus/</link>
      <pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/10/05/2018-10-05-how-to-profile-your-r-code-that-calls-c-c-plus-plus/</guid>
      <description>

&lt;p&gt;Software optimization is a key aspect of software development, especially when working with large datasets. The only way to know if your software will perform adequately under ideal (and non-ideal) circumstances is to use a careful combination of tests and benchmarking/code profiling tools. Code profilers show how a software behaves and what functions are being called while benchmarking tools generally focus on just execution time. Some tools combine both profiling and benchmarking. In R, some of the common tools to help with this are &lt;a href=&#34;https://github.com/joshuaulrich/microbenchmark/&#34;&gt;microbenchmark&lt;/a&gt;, &lt;a href=&#34;http://collectivemedia.github.io/tictoc/&#34;&gt;tictoc&lt;/a&gt;, Rprof (from R utils package), &lt;a href=&#34;https://CRAN.R-project.org/package=proftools&#34;&gt;proftools&lt;/a&gt;, and &lt;a href=&#34;https://rstudio.github.io/profvis/&#34;&gt;profvis&lt;/a&gt;. All of the R based tools have limitations with respect to insight into performance of compiled code: visibility stops at the .Call() function. In order to get around this limitation, the use of a more general purpose profiling tool is required.&lt;/p&gt;

&lt;p&gt;While there are many options for profiling C/C++ (or other compiled code) on Linux, many of those tools are difficult to get working correctly with R. Non-Linux users and developers may not be familiar with tools available on their respective platforms. Furthermore, profiling R code with C++ is complicated due to different settings between various OSes. While there are some blog posts and presentation materials available on the Internet, many miss important steps that take some effort to determine the correct solution to resolve.&lt;/p&gt;

&lt;h2 id=&#34;steps-to-profile-c-code-being-called-by-r-code-using-a-gui&#34;&gt;Steps to profile C++ code being called by R code using a GUI&lt;/h2&gt;

&lt;p&gt;macOS users can use Xcode (freely available) for profiling of R code that calls C++ code. As Xcode has a nice GUI, it may be the preferred tool for many users. The primary profiling tool in Xcode is called &lt;a href=&#34;https://help.apple.com/instruments/mac/10.0/#/dev7b09c84f5&#34;&gt;Instruments&lt;/a&gt;. Instruments can be launched by first opening Xcode, then from the Xcode application menu select Open Developer Tool-&amp;gt;Instruments.&lt;/p&gt;

&lt;p&gt;For users on Windows, the GPL licensed &lt;a href=&#34;http://www.codersnotes.com/sleepy/&#34;&gt;Very Sleepy&lt;/a&gt; is an excellent GUI profiler that works almost identically to Xcode Instruments for CPU Profiling.&lt;/p&gt;

&lt;p&gt;For simplicity sake, steps below demonstrate using Instruments; for other GUIs, steps are very similar. Here are some basic steps to get it working:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Configure compilation to enable debugging. In GCC and CLANG this can be accomplished by adding ‘-g’ to your compiler flags via Makevars. If you are developing a package, Makevars or Makevars.win should be in the &amp;ldquo;src&amp;rdquo; directory. Otherwise, update/check ~/.R/Makevars (linux and mac) or .R/Makevars.win (windows) file in your home directory. Depending on your other compiler settings you may also want to add -O0, though changing optimization levels may alter any gains achieved through profiling.&lt;/li&gt;
&lt;li&gt;Determine what you want to profile. &lt;em&gt;The code you run needs to last sufficiently long to allow for application switching and to gather sufficient data via profiling.&lt;/em&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a script to run the code you are interested in. Here is an example of running PCCC with an input dataset of 500000 rows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(pccc)
# replicate sample dataset from pccc package to get larger set
# so that it will run long enough to profile. adjust as needed...
mydata &amp;lt;- pccc::pccc_icd10_dataset
large_dataset &amp;lt;- mydata[rep(seq_len(nrow(mydata)), 500), ]
# function that does work to be profiled
ccc(large_dataset[, c(1:21)], # get id, dx, and pc columns
    id      = id,
    dx_cols = dplyr::starts_with(&amp;quot;dx&amp;quot;),
    pc_cols = dplyr::starts_with(&amp;quot;pc&amp;quot;),
    icdv    = 10)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Prep Instruments by selecting ‘Time Profiler’ and then identifying the necessary process. If running script via RStudio, you will need to observe the rsession process. If running via command line R, the process is R. Alternatively run Instruments with “Allocations” to see memory allocations&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Start profiling.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Start your script in whatever fashion you normally run R scripts.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;After you have gathered sufficient data (perhaps 30 seconds to 1 minute), stop the profiling process.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Find your custom function calls in the symbol tree. There will likely be many layers before your code is called. The call just before your code will be “do_dotcall” The symbol tree should show your custom function names and how long each took.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Xcode Instruments screenshot showing C++ code from &lt;a href=&#34;https://cran.r-project.org/package=pccc&#34;&gt;PCCC&lt;/a&gt; R package&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/post/2018-10-05-how-to-profile-your-r-code-that-calls-c-c-plus-plus_files/instruments_screenshot.png&#34; alt=&#34;Xcode Instruments screenshot showing profiling of R code that calls C/C++&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;steps-to-profile-c-code-via-command-line-on-macos-and-linux-using-gperftools&#34;&gt;Steps to profile C++ code via command line on macOS and Linux using gperftools&lt;/h2&gt;

&lt;p&gt;To profile R code that calls C++ code via command line tools requires calling the correct R binary as well as setting up correct environment variables in a OS specific fashion.&lt;/p&gt;

&lt;p&gt;For macOS, I recommend installing gperftools via &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt; &lt;code&gt;brew install gperftools&lt;/code&gt;. For Linux, use your respective package manager (rpm/apt/pacman/etc.):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Debian derivatives
sudo apt-get install google-perftools
# Redhat derivates
sudo yum install gperftools
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Follow steps 1 – 3 as shown above.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Identify location of R binary. By default ‘R’ is actually a batch shell script that launches the R binary. You cannot get the desired profiling informaiton about your code from profiling a shell script.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For macOS, using R installed via Homebrew, the actual R binary is located at &lt;code&gt;/usr/local/Cellar/r/3.5.1/lib/R/bin/exec/R&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For Linux users, the R binary is likely located at &lt;code&gt;/usr/lib/R/bin/exec/R&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set (or verify) your R_HOME environment variable.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For macOS, using R installed via Homebrew, the R_HOME is &lt;code&gt;/usr/local/Cellar/r/3.5.1/lib/R&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For Linux users, the R binary is likely located at &lt;code&gt;/usr/lib/R/bin/exec/R&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If your environment variable is not set, set R_HOME via a command like (replace path with your actual R Home location). If you use bash, the command is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export R_HOME=/usr/lib/R/bin/exec/R
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run your test (&lt;em&gt;in this example it is called profile_sample.R&lt;/em&gt;) script with the perftools libraries loaded and an environment variable CPUPROFILE that specifies the location to save the CPU profile output. Replace libprofiler path and file name with your actual filename. Replace R binary with your actual R binary with full path.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;For macOS, this is accomplished via the command &lt;code&gt;DYLD_INSERT_LIBRARIES=/usr/local/lib/libprofiler.dylib CPUPROFILE=sample.profile /usr/local/Cellar/r/3.5.1/lib/R/bin/exec/R -f profile_sample.R&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For Linux, this is accomplished via the command &lt;code&gt;LD_PRELOAD=/usr/lib/libprofiler.so CPUPROFILE=sample.profile /usr/lib/R/bin/exec/R -f profile_sample.R&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;View the results via pprof; again, ensure you use your actual R binary path.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For macOS, this is accomplished via the command &lt;code&gt;pprof --text /usr/local/Cellar/r/3.5.1/lib/R/bin/exec/R sample.profile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For Linux, this is accomplished via (Debian based distributions may call pprof ‘google-pprof’) the command &lt;code&gt;pprof --text /usr/bin/R ./sample.profile&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Output will be something similar to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Using local file /usr/bin/R.
Using local file ./sample.profile.
Total: 7399 samples
    2252  30.4%  30.4%     2252  30.4% __nss_passwd_lookup
    2172  29.4%  59.8%     4389  59.3% std::__cxx11::basic_string::compare
     982  13.3%  73.1%     5594  75.6% codes::find_match
     591   8.0%  81.1%      621   8.4% Rf_mkCharLenCE
     462   6.2%  87.3%      482   6.5% R_BadLongVector
     223   3.0%  90.3%      223   3.0% std::vector::operator[] (inline)
     151   2.0%  92.4%      151   2.0% std::__once_callable
      98   1.3%  93.7%       98   1.3% SET_STRING_ELT
      83   1.1%  94.8%       83   1.1% _init@6750
      30   0.4%  95.2%      452   6.1% Rf_allocVector3
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Updated Oct 6, 2018 based on feedback from Matthew Krump&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Changed code example to be more easily reproduced&lt;/li&gt;
&lt;li&gt;More details on Makevars&lt;/li&gt;
&lt;li&gt;More details on launching Instruments&lt;/li&gt;
&lt;li&gt;Recommendations on installing gproftools&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>R Package for Pediatric Complex Chronic Condition Classification</title>
      <link>/project/pediatric-complex-chronic-conditions/</link>
      <pubDate>Thu, 27 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/project/pediatric-complex-chronic-conditions/</guid>
      <description>

&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;Version 2 of the Pediatric Complex Chronic Conditions (CCC) system was published
&lt;a href=&#34;http://bmcpediatr.biomedcentral.com/articles/10.1186/1471-2431-14-199&#34;&gt;&amp;ldquo;Pediatric complex chronic conditions classification system version
2: updated for ICD-10 and complex medical technology dependence and
transplantation&amp;rdquo; by Chris Feudtner, James A Feinstein, Wenjun Zhong, Matt Hall
and Dingwei Dai&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;SAS and STATA scripts to generate CCC categories from ICD codes were provided by Feudtner et al.
as an appendix to the above manuscript. However, those scripts can take many hours to run
on large datasets.&lt;/p&gt;

&lt;p&gt;This package provides R functions to generate the CCC categories. Because the R functions
are built with a C++ back-end, they are very computationally efficient.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;h3 id=&#34;from-cran&#34;&gt;From CRAN&lt;/h3&gt;

&lt;p&gt;Version 1.0.2 is available on The Comprehensive R Archive Network at &lt;a href=&#34;https://CRAN.R-project.org/package=pccc&#34;&gt;https://CRAN.R-project.org/package=pccc&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;developmental-version&#34;&gt;Developmental version&lt;/h3&gt;

&lt;p&gt;You can install the
developmental version of &lt;code&gt;pccc&lt;/code&gt; directly from github using the
&lt;a href=&#34;https://github.com/hadley/devtools/&#34;&gt;&lt;code&gt;devtools&lt;/code&gt;&lt;/a&gt; package:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (!(&amp;quot;devtools&amp;quot; %in% rownames(installed.packages()))) { 
  warning(&amp;quot;installing devtools from https://cran.rstudio.com&amp;quot;)
  install.packages(&amp;quot;devtools&amp;quot;, repo = &amp;quot;https://cran.rstudio.com&amp;quot;)
}

devtools::install_github(&amp;quot;CUD2V/pccc&amp;quot;, build_vignettes = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; If you are working on a Windows machine you will need to download and
install &lt;a href=&#34;https://cran.r-project.org/bin/windows/Rtools/&#34;&gt;&lt;code&gt;Rtools&lt;/code&gt;&lt;/a&gt; before
&lt;code&gt;devtools&lt;/code&gt; will work for you.&lt;/p&gt;

&lt;p&gt;If you are on a Linux machine or have GNU &lt;code&gt;make&lt;/code&gt; configured you should be able
to build and install this package by cloning the repository and running&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;more-project-information&#34;&gt;More project information&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ve published a research letter in JAMA Pediatrics on this R package:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://jamanetwork.com/journals/jamapediatrics/fullarticle/2677901&#34;&gt;https://jamanetwork.com/journals/jamapediatrics/fullarticle/2677901&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For source code see:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/CUD2V/pccc&#34;&gt;https://github.com/CUD2V/pccc&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>