<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>google cloud on Seth Russell</title>
    <link>https://magic-lantern.github.io/tags/google-cloud/</link>
    <description>Recent content in google cloud on Seth Russell</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Mon, 15 Oct 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://magic-lantern.github.io/tags/google-cloud/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using Google Compute Engine as host for RStudio Server</title>
      <link>https://magic-lantern.github.io/2018/10/15/2018-10-15-using-google-compute-engine-as-host-for-rstudio-server/</link>
      <pubDate>Mon, 15 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://magic-lantern.github.io/2018/10/15/2018-10-15-using-google-compute-engine-as-host-for-rstudio-server/</guid>
      <description>&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Last updated November 30, 2018. This post is a work in progress.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.rstudio.com/products/rstudio-server-pro/&#34;&gt;RStudio Server&lt;/a&gt;  (&lt;a href=&#34;https://www.rstudio.com/products/rstudio/download-server/&#34;&gt;download&lt;/a&gt;), is feature comparable to the desktop software &lt;a href=&#34;https://www.rstudio.com/products/rstudio/&#34;&gt;RStudio IDE&lt;/a&gt;. RStudio Server is available under two different licensing models: &amp;ldquo;Open Source Edition: (AGPL v3), and &amp;ldquo;Commercial License.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Google Cloud has a wide range of services available. Everything from machine learning APIs to development environments to database as a service. However, one thing they don&amp;rsquo;t have is a good R environment for development of R packages or analysis. I&amp;rsquo;ve found the most flexible option to get a great R environment on Google Cloud is to use a Google Compute Engine instance (GCE) - Google&amp;rsquo;s cloud hosted virtual machine platform.&lt;/p&gt;
&lt;p&gt;In this post, I&amp;rsquo;ll be setting up the Open Source Edition of RStudio Server. Total estimated cost per month if the system is running 24x7: $202.68/month. Cost is much less if you only run the system as needed (business hours only would cost about $45/month)&lt;/p&gt;
&lt;p&gt;Steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create new GCE&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Navigate to &lt;a href=&#34;https://console.cloud.google.com&#34;&gt;https://console.cloud.google.com&lt;/a&gt;. If you don&amp;rsquo;t already have an account, you can setup a free account with $300 credits for 365 days.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From the navigation menu (top left), select &amp;ldquo;Compute Engine&amp;rdquo; (under &amp;lsquo;COMPUTE&amp;rsquo;) -&amp;gt; &amp;ldquo;VM Instances&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &amp;ldquo;CREATE INSTANCE&amp;rdquo; at the top of the page&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Name your instance as desired.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pcik desired zone. I selected us-central1 (as that zonehas GPU availability should I want that feature in the future)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Machine type&lt;/strong&gt;: I selected &lt;strong&gt;8 CPU 30GB RAM (n1-standard-8)&lt;/strong&gt; based on estimated resources needed. This host will support 6 Data Scientist; you can always scale this up or down as needed after VM creation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Boot Disk&lt;/strong&gt;: Click change - select &lt;strong&gt;Ubuntu 18.04 LTS minimal&lt;/strong&gt; - LTS minimal installs very few packages by default, keeping disk usage minimized. Most Linux distributions are free to use, but not all OSes are; some have an hourly charge.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Boot Disk&lt;/strong&gt;: Recommend setting size to 50GB and selecting &lt;strong&gt;Boot Disk Type&lt;/strong&gt; to SSD. While an SSD will cost $8/more per month than standard persistent disk when running 24x7, it also performs much better when using local files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Firewall&lt;/strong&gt;: Check both boxes to allow HTTP and HTTPS traffic.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &amp;ldquo;Create&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Static IP Address setup&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Once machine is up (takes perhaps 30 seconds), click the machine name&lt;/li&gt;
&lt;li&gt;Scroll down to the &amp;ldquo;Network Interfaces&amp;rdquo; section and click &amp;ldquo;View Details&amp;rdquo; in the &amp;ldquo;Network Details&amp;rdquo; column.&lt;/li&gt;
&lt;li&gt;From the left menu &amp;ldquo;VPC Network&amp;rdquo;, select &amp;ldquo;External IP addresses&amp;rdquo;&lt;/li&gt;
&lt;li&gt;In the &amp;ldquo;Type&amp;rdquo; column, click the drop down to change from &amp;ldquo;Ephemeral&amp;rdquo; to &amp;ldquo;Static&amp;rdquo;. A static ip reservation results in a constant but small ongoing charge.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Basic machine setup: One the VM Instance page, in the &amp;ldquo;Connect&amp;rdquo; column, click &amp;ldquo;SSH&amp;rdquo;. Once the SSH window pops up, run these commands&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install htop tmux dialog vim lsof less&lt;/code&gt; This installs a few basic tools that I find to be helpful&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sudo adduser &amp;lt;name&amp;gt;&lt;/code&gt; Add users as appropriate. RStudio Server uses local accounts to control access to the web UI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install R and RStudio. I selected to install R 3.5.x by following instructions at &lt;a href=&#34;https://cran.rstudio.com/bin/linux/ubuntu/README.html&#34;&gt;https://cran.rstudio.com/bin/linux/ubuntu/README.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get update&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get upgrade&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;add this line to /etc/apt/sources.list: &lt;code&gt;deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install r-base r-base-dev pandoc gdebi-core git subversion texlive texlive-latex-extra&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;wget https://download2.rstudio.org/rstudio-server-1.1.456-amd64.deb&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sudo gdebi rstudio-server-1.1.456-amd64.deb&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run R and install additional desired packages. &lt;em&gt;Note:&lt;/em&gt; Installing packages as root installs those packages for all uesrs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install libssl-dev libcurl4-openssl-dev libxml2-dev wget&lt;/code&gt; This fullfills some dependency requirements for desired packages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sudo R&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;install.packages(c(&#39;tidyverse&#39;, &#39;bigrquery&#39;, &#39;devtools&#39;, &#39;shiny&#39;, &#39;caTools&#39;, &#39;bitops&#39;, &#39;dt&#39;))&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify packages have been installed correctly: &lt;code&gt;require(&amp;quot;dplyr&amp;quot;)&lt;/code&gt; and &lt;code&gt;require(&#39;bigrquery&#39;)&lt;/code&gt; etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install Nginx and add Let&amp;rsquo;s Encrypt SSL cert &lt;a href=&#34;https://certbot.eff.org/lets-encrypt/ubuntubionic-nginx&#34;&gt;https://certbot.eff.org/lets-encrypt/ubuntubionic-nginx&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install nginx software-properties-common&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sudo add-apt-repository ppa:certbot/certbot&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get update&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install python-certbot-nginx&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a new nginx configuration file by copying the default configuration:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/rstudio-server&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Remove the default site from being served, but keep the configuration for reference: &lt;code&gt;sudo rm /etc/nginx/sites-enabled/default&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Make sure Nginx still works - &lt;code&gt;sudo systemctl restart nginx&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sudo certbot --nginx&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Setup Nginx to proxy RStudio Server via https port. Follow instructions similar to &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-configure-nginx-with-ssl-as-a-reverse-proxy-for-jenkins&#34;&gt;https://www.digitalocean.com/community/tutorials/how-to-configure-nginx-with-ssl-as-a-reverse-proxy-for-jenkins&lt;/a&gt; and &lt;a href=&#34;https://support.rstudio.com/hc/en-us/articles/200552326-Configuring-the-Server/&#34;&gt;https://support.rstudio.com/hc/en-us/articles/200552326-Configuring-the-Server/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modify the :443 portion to do the https proxy - this goes in a location{} section; the key lines are:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;proxy_set_header        Host $host;
proxy_set_header        X-Real-IP $remote_addr;
proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header        X-Forwarded-Proto $scheme;
# adjust these two lines to match your RStudio Server port
proxy_pass          http://localhost:8787;
proxy_redirect      http://localhost:8787 $scheme://$http_host/;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In order to get the websockets component working, you need to modify /etc/nginx/nginx.conf and add the following section inside the http{} block:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map $http_upgrade $connection_upgrade {
  default upgrade;
  &#39;&#39;      close;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the following lines to your server{} block:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;proxy_http_version 1.1;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $connection_upgrade;
proxy_read_timeout 7d; # want something long so websocket doesn&#39;t automatcailly close on user
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Symlink your &lt;code&gt;/etc/nginx/sites-available&lt;/code&gt; file to &lt;code&gt;/etc/nginx/sites-enabled&lt;/code&gt; sites-enabled is the directory that the nginx server will look in when starting up.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optional Step: Force all http traffic to redirect to https (certbot can set this up for you if you want):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
    if ($host = yourdomain.tld) {
        return 301 https://$host$request_uri;
    } # managed by Certbot
     
       listen 80 ;
       listen [::]:80 ;
    server_name yourdomain.tld;
    return 404; # managed by Certbot
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Resulting nginx configuration file should look like: &lt;a href=&#34;https://gist.github.com/magic-lantern/1b5e11c3cf5964b69e8e7824df015c5d&#34;&gt;https://gist.github.com/magic-lantern/1b5e11c3cf5964b69e8e7824df015c5d&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Before restarting nginx, test your configuration by running &lt;code&gt;nginx -t&lt;/code&gt;. Fix any errors before restarting with &lt;code&gt;systemctl restart nginx&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Some URLs for additional information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;General setup: &lt;a href=&#34;https://towardsdatascience.com/running-jupyter-notebook-in-google-cloud-platform-in-15-min-61e16da34d52&#34;&gt;https://towardsdatascience.com/running-jupyter-notebook-in-google-cloud-platform-in-15-min-61e16da34d52&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Static IP Address: &lt;a href=&#34;https://cloud.google.com/compute/pricing?hl=en_US&amp;amp;_ga=2.8427253.-1719922974.1503442674#ipaddress&#34;&gt;https://cloud.google.com/compute/pricing?hl=en_US&amp;amp;_ga=2.8427253.-1719922974.1503442674#ipaddress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Network Tier Pricing: &lt;a href=&#34;https://cloud.google.com/network-tiers/pricing&#34;&gt;https://cloud.google.com/network-tiers/pricing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Nginx as a reverse proxy: &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-configure-nginx-with-ssl-as-a-reverse-proxy-for-jenkins&#34;&gt;https://www.digitalocean.com/community/tutorials/how-to-configure-nginx-with-ssl-as-a-reverse-proxy-for-jenkins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Starting and Stoping the RStudio Server Service: &lt;a href=&#34;https://support.rstudio.com/hc/en-us/articles/200532327-Managing-the-Server&#34;&gt;https://support.rstudio.com/hc/en-us/articles/200532327-Managing-the-Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;RStudio Server setup using PAM and Apache : &lt;a href=&#34;https://jstaf.github.io/2018/06/20/rstudio-server-semi-pro.html&#34;&gt;https://jstaf.github.io/2018/06/20/rstudio-server-semi-pro.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Example of Python data analysis</title>
      <link>https://magic-lantern.github.io/2018/09/27/2018-09-27-example-of-python-data-analysis/</link>
      <pubDate>Thu, 27 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://magic-lantern.github.io/2018/09/27/2018-09-27-example-of-python-data-analysis/</guid>
      <description>&lt;p&gt;&lt;em&gt;Work in Progress&amp;hellip;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This Analytics example is meant to demonstrate a few of the things you can do to analyze data stored in Google BigQuery using Python. Originally developed some time ago, I thought I&amp;rsquo;d clean it up and post it here.&lt;/p&gt;
&lt;p&gt;For those that aren&amp;rsquo;t familiar with BigQuery, it is a &amp;lsquo;serverless&amp;rsquo; database system that is fully managed and always available. Instead of charging per environment/instance/hour of time like many cloud database systems, Google charges based on the amount of data a query processes. For those familiar with Amazon Web Services, BigQuery is more like DynamoDB rather than an Aurora/Redshift/etc instances where you pay per hour.&lt;/p&gt;
&lt;p&gt;For more details on this example, setup, etc. please see the project wiki: &lt;a href=&#34;https://github.com/CUD2V/analytics_examples/wiki&#34;&gt;https://github.com/CUD2V/analytics_examples/wiki&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For some additional examples showing more of the capabilities of Google BigQuery or Google Cloud Storage see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/magic-lantern/904e22ca625404da489dab4f2706fdc7&#34;&gt;Google Cloud BigQuery Example&lt;/a&gt; - Some alternative methods of getting data from Google BigQuery.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/magic-lantern/c11500847f06a6e63bae4ca010595773&#34;&gt;Google Cloud Storage Example&lt;/a&gt; - Most analysis that a person would want to do will likely include accessing external data or storing results of some process for further downstream analysis. Google Cloud Storage is one option for that phase of an anlysis pipeline.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas

&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; IPython.core.display &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; display, HTML
display(HTML(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;style&amp;gt;.container { width:95% !important; }&amp;lt;/style&amp;gt;&amp;#34;&lt;/span&gt;))

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; psycopg2 &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pg
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas.io.sql &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; psql

&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; bokeh.io &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; output_notebook, show
output_notebook()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# this is to hide useless errors if using OAuth with BigQuery&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; logging
logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getLogger(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;googleapiclient.discovery_cache&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setLevel(logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;CRITICAL)
&lt;span style=&#34;color:#75715e&#34;&gt;# don&amp;#39;t want to be messaged about future warnings as I&amp;#39;m not explicitly calling code that is being warned about&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; warnings
warnings&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;simplefilter(action&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ignore&amp;#39;&lt;/span&gt;, category&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FutureWarning&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# set this to either postgres or bigquery ####&lt;/span&gt;
datasource &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bigquery&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;##############################################&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; datasource &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;postgres&amp;#39;&lt;/span&gt;:
    &lt;span style=&#34;color:#75715e&#34;&gt;# get connected to the database&lt;/span&gt;
    connection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;host=localhost dbname=ohdsi user=ohdsi password=ohdsi&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;# print the connection string we will use to connect&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Connecting to database: &amp;#34;&lt;/span&gt;, connection)

    &lt;span style=&#34;color:#75715e&#34;&gt;# conn.cursor will return a cursor object, you can use this cursor to perform queries&lt;/span&gt;
    cursor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; connection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cursor()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Connected to Postgres database!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; datasource &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bigquery&amp;#39;&lt;/span&gt;:
    connection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;project_id&amp;#39;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;synpuf-omop-project&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dialect&amp;#39;&lt;/span&gt;    : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;standard&amp;#39;&lt;/span&gt;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Setup Google BigQuery connection&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    connection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read_data&lt;/span&gt;(sql):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; datasource &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;postgres&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pandas&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_sql(sql, connection)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; datasource &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bigquery&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pandas&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_gbq(sql, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;connection)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pandas&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;exploration-and-visualization&#34;&gt;Exploration and Visualization&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;These next cells are charts looking at births by year - of the population still active in medicare today.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; bokeh.charts &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Bar
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; bokeh.io &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; output_notebook, show
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; bokeh.charts &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; defaults
defaults&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;900&lt;/span&gt;
defaults&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;700&lt;/span&gt;

age_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read_data(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;select
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    count(year_of_birth) count,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    year_of_birth,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    c1.concept_name gender
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;from synpuf_omop.person p
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;left join synpuf_omop.concept c1 on p.gender_concept_id = c1.concept_id
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;group by gender, year_of_birth
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;order by year_of_birth, gender
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)

p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Bar(age_df,             &lt;span style=&#34;color:#75715e&#34;&gt;# source of data&lt;/span&gt;
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;year_of_birth&amp;#39;&lt;/span&gt;,    &lt;span style=&#34;color:#75715e&#34;&gt;# columns from dataframe to use&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#label=&amp;#39;origin&amp;#39;, &lt;/span&gt;
        agg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sum&amp;#39;&lt;/span&gt;,
        values&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;count&amp;#39;&lt;/span&gt;,
        stack&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gender&amp;#39;&lt;/span&gt;,
        title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Births by year, stacked by gender&amp;#34;&lt;/span&gt;,
        legend&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;top_right&amp;#39;&lt;/span&gt;)
show(p)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; bokeh.charts &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Bar
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; bokeh.io &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; output_notebook, show
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; bokeh.charts &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; defaults
defaults&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;900&lt;/span&gt;
defaults&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;700&lt;/span&gt;

pct_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read_data(
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;select
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    year_of_birth,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    count(case when c1.concept_name = &amp;#39;FEMALE&amp;#39; then 1 end) gender_count,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#39;FEMALE&amp;#39; gender,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    count(1) total_births
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;from synpuf_omop.person p
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;left join synpuf_omop.concept c1 on p.gender_concept_id = c1.concept_id
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;group by year_of_birth
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;union all
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;select
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    year_of_birth,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    count(case when c1.concept_name = &amp;#39;MALE&amp;#39; then 1 end) gender_count,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#39;MALE&amp;#39; gender,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    count(1) total_births
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;from synpuf_omop.person p
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;left join synpuf_omop.concept c1 on p.gender_concept_id = c1.concept_id
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;group by year_of_birth
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;order by year_of_birth, gender asc
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(i):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; float(i[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gender_count&amp;#39;&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; float(i[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;total_births&amp;#39;&lt;/span&gt;])
pct_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pct&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pct_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(f, axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)


p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Bar(pct_df,             &lt;span style=&#34;color:#75715e&#34;&gt;# source of data&lt;/span&gt;
        values&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pct&amp;#39;&lt;/span&gt;,          &lt;span style=&#34;color:#75715e&#34;&gt;# y axis&lt;/span&gt;
        label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;year_of_birth&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# x axis &lt;/span&gt;
        agg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sum&amp;#39;&lt;/span&gt;,
        stack&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gender&amp;#39;&lt;/span&gt;,
        title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Percentage of births by year, stacked by gender&amp;#34;&lt;/span&gt;,
        legend&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;top_right&amp;#39;&lt;/span&gt;)
show(p)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;These next few cells look at drug duration (how long a perscription is to last)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Due to differences in SQL dialects, this is the PostgreSQL version - inline below is the Google BigQuery version. Might be possible to make one statement work for both&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;--person_id,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;--drug_concept_id,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    c1.concept_name drug_name,
    &lt;span style=&#34;color:#75715e&#34;&gt;--drug_era_start_date,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;--drug_era_end_date,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    drug_era_end_date &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; drug_era_start_date duration
&lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; synpuf_omop.drug_era d
&lt;span style=&#34;color:#66d9ef&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;join&lt;/span&gt; synpuf_omop.concept c1 &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt; d.drug_concept_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c1.concept_id
&lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; c1.concept_name &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; (
&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; drug_name &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; (
    &lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt;
    c1.concept_name drug_name,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; synpuf_omop.drug_era d
    &lt;span style=&#34;color:#66d9ef&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;join&lt;/span&gt; synpuf_omop.concept c1 &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt; d.drug_concept_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c1.concept_id
    &lt;span style=&#34;color:#66d9ef&#34;&gt;group&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;by&lt;/span&gt; drug_name
    &lt;span style=&#34;color:#66d9ef&#34;&gt;order&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;by&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;desc&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;limit&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;
   ) x
)
&lt;span style=&#34;color:#66d9ef&#34;&gt;order&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;by&lt;/span&gt; drug_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# perhaps modify this query to look at drugs with most variation in duration?&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; bokeh.charts &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; BoxPlot, output_file, show
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; bokeh.sampledata.autompg &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; autompg &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; df
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; bokeh.charts &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; defaults
defaults&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;900&lt;/span&gt;
defaults&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;900&lt;/span&gt;

dd_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read_data(
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;select
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --person_id,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --drug_concept_id,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    c1.concept_name drug_name,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --drug_era_start_date,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --drug_era_end_date,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    date_diff(cast(drug_era_end_date as date), cast(drug_era_start_date as date), day) as duration
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;from synpuf_omop.drug_era d
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;left join synpuf_omop.concept c1 on d.drug_concept_id = c1.concept_id
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;where c1.concept_name in (
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;select drug_name from (
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    select
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    c1.concept_name drug_name,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    count(1) count
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    from synpuf_omop.drug_era d
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    left join synpuf_omop.concept c1 on d.drug_concept_id = c1.concept_id
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    group by drug_name
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    order by count desc
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    limit 25
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   ) x
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;order by drug_name
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)

p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BoxPlot(dd_df,
            values&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;duration&amp;#39;&lt;/span&gt;,      &lt;span style=&#34;color:#75715e&#34;&gt;# y axis&lt;/span&gt;
            label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;drug_name&amp;#39;&lt;/span&gt;,      &lt;span style=&#34;color:#75715e&#34;&gt;# x axis&lt;/span&gt;
            title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Drug Duration Box Plot&amp;#34;&lt;/span&gt;,
            legend&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False,
           )
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xaxis&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;axis_label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Drug&amp;#34;&lt;/span&gt;
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;yaxis&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;axis_label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Duration (days)&amp;#34;&lt;/span&gt;


show(p)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Alternatively, you can just get all the data via more simple SQL SELECT statment and do the data processing via Pandas&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Again as with the previous query, due to SQL dialect differences, this is the PostgreSQL version - in cell below is the BigQuery version:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt;
    c1.concept_name drug_name,
    drug_era_end_date &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; drug_era_start_date duration
&lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; synpuf_omop.drug_era d
&lt;span style=&#34;color:#66d9ef&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;join&lt;/span&gt; synpuf_omop.concept c1 &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt; d.drug_concept_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c1.concept_id
&lt;span style=&#34;color:#66d9ef&#34;&gt;order&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;by&lt;/span&gt; drug_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;size_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
drug_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
top_25 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
top_drugs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None

drug_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read_data(
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;select
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    c1.concept_name drug_name,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    date_diff(cast(drug_era_end_date as date), cast(drug_era_start_date as date), day) as duration
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;from synpuf_omop.drug_era d
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;left join synpuf_omop.concept c1 on d.drug_concept_id = c1.concept_id
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;order by drug_name
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# if we only want to look at 25 most common drugs&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# count rows grouping by drug_name&lt;/span&gt;
size_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; drug_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groupby(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;drug_name&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size()
&lt;span style=&#34;color:#75715e&#34;&gt;# sort the counted result and only return top 25&lt;/span&gt;
top_25 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; size_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort_values(ascending &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# for verification purposes show all rows from original dataset matching most common drug&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#drug_df[drug_df.drug_name.str.contains(top_25.index[0]) == True]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# only keep rows that match the top_25 pandas series (single column of a dataframe)&lt;/span&gt;
top_drugs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; drug_df[drug_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;drug_name&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isin(top_25&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index)]
&lt;span style=&#34;color:#75715e&#34;&gt;# for verification sql method says there are 1683795 rows&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Does Pandas version match SQL results:&amp;#34;&lt;/span&gt;, top_drugs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1683795&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; bokeh.charts &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; BoxPlot, output_file, show
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; bokeh.sampledata.autompg &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; autompg &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; df
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; bokeh.charts &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; defaults
defaults&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;900&lt;/span&gt;
defaults&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;900&lt;/span&gt;
p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BoxPlot(top_drugs,
            values&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;duration&amp;#39;&lt;/span&gt;,      &lt;span style=&#34;color:#75715e&#34;&gt;# y axis&lt;/span&gt;
            label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;drug_name&amp;#39;&lt;/span&gt;,      &lt;span style=&#34;color:#75715e&#34;&gt;# x axis&lt;/span&gt;
            title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Drug Duration Box Plot&amp;#34;&lt;/span&gt;,
            legend&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False,
           )
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xaxis&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;axis_label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Drug&amp;#34;&lt;/span&gt;
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;yaxis&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;axis_label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Duration (days)&amp;#34;&lt;/span&gt;


show(p)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;cohort-identification--prediction&#34;&gt;Cohort identification &amp;amp; Prediction&lt;/h2&gt;
&lt;p&gt;Suppose we want to do some analysis including prediction for patients that complain of lower back pain (SNOMED code 279039007 - see &lt;a href=&#34;http://bioportal.bioontology.org/ontologies/SNOMEDCT?p=classes&amp;amp;conceptid=279039007&#34;&gt;http://bioportal.bioontology.org/ontologies/SNOMEDCT?p=classes&amp;amp;conceptid=279039007&lt;/a&gt; or &lt;a href=&#34;https://phinvads.cdc.gov/vads/http:/phinvads.cdc.gov/vads/ViewCodeSystemConcept.action?oid=2.16.840.1.113883.6.96&amp;amp;code=279039007&#34;&gt;https://phinvads.cdc.gov/vads/http:/phinvads.cdc.gov/vads/ViewCodeSystemConcept.action?oid=2.16.840.1.113883.6.96&amp;amp;code=279039007&lt;/a&gt; for more information)&lt;/p&gt;
&lt;p&gt;The OMOP data model has &lt;a href=&#34;http://www.ohdsi.org/web/wiki/doku.php?id=documentation:cdm:condition_occurrence&#34;&gt;CONDITION_OCCURRENCE&lt;/a&gt; table to document findings. The &lt;a href=&#34;http://www.ohdsi.org/web/wiki/doku.php?id=documentation:cdm:condition_era&#34;&gt;CONDITION_ERA&lt;/a&gt; table is a calculation of a condition duration.&lt;/p&gt;
&lt;p&gt;While there are many elements that we could use for predicting condition duration, suppose we start with basic demographic information about the patient. Here&amp;rsquo;s a query that creates a pandas dataframe with our desired cohort.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;backpain_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read_data(
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;SELECT
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  c.person_id,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  gender_concept_id,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  year_of_birth,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  race_concept_id,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  ethnicity_concept_id,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  location_id,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  DATE_DIFF(CAST(condition_era_end_date AS date), CAST(condition_era_start_date AS date), day) AS duration
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;FROM
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  synpuf_omop.condition_era c
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;LEFT JOIN
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  synpuf_omop.person p
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ON
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  c.person_id = p.person_id
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;WHERE
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  condition_concept_id = 194133
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# View summary information about dataset&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(backpain_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;describe()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_string())

&lt;span style=&#34;color:#75715e&#34;&gt;# prevent wrapping when printing the full dataframe&lt;/span&gt;
pandas&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_option(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;display.expand_frame_repr&amp;#39;&lt;/span&gt;, False)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(backpain_df)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;bf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; backpain_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Most of the data in this dataset is categorical, so need to use dummy encoding on each categorical column&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# so that regression will work correctly. Here&amp;#39;s the categorical columns:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   gender_concept_id     (binary)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   race_concept_id       (multiple categories)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   ethnicity_concept_id  (binary)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   location_id           (multiple categories)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# can&amp;#39;t do them all at once - so step through one at a time&lt;/span&gt;
bf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pandas&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_dummies(bf, columns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gender_concept_id&amp;#39;&lt;/span&gt;], drop_first&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
bf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pandas&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_dummies(bf, columns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;race_concept_id&amp;#39;&lt;/span&gt;], drop_first&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
bf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pandas&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_dummies(bf, columns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ethnicity_concept_id&amp;#39;&lt;/span&gt;], drop_first&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
bf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pandas&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_dummies(bf, columns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;location_id&amp;#39;&lt;/span&gt;], drop_first&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(bf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# only run this cell if previous results look correct&lt;/span&gt;
backpain_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(backpain_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# divide data into independent and dependent variables&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# exclude person_id and duration from independent variables&lt;/span&gt;
input_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; backpain_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;person_id&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;duration&amp;#39;&lt;/span&gt;], axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

output_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; backpain_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;duration&amp;#39;&lt;/span&gt;]

&lt;span style=&#34;color:#75715e&#34;&gt;# split data into training vs testing dataset&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.model_selection &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; train_test_split

input_train, input_test, output_train, output_test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; train_test_split(input_df, output_df, test_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;, random_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# now generate linear regression model on training data&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.linear_model &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; LinearRegression
lm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LinearRegression()
lm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(input_train, output_train)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# print intercept and coefficients&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Intercept: &amp;#34;&lt;/span&gt;, lm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;intercept_)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Coefficients: &amp;#34;&lt;/span&gt;, lm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;coef_)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;R^2 value: &amp;#34;&lt;/span&gt;, lm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;score(input_train, output_train))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For a brief explaination of what R&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; means, see &lt;a href=&#34;http://blog.minitab.com/blog/adventures-in-statistics-2/regression-analysis-how-do-i-interpret-r-squared-and-assess-the-goodness-of-fit&#34;&gt;http://blog.minitab.com/blog/adventures-in-statistics-2/regression-analysis-how-do-i-interpret-r-squared-and-assess-the-goodness-of-fit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In general, the closer R&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; is to 1, the better the model explains variation in data. Plotting or visualizing data along with the predictive model helps to visually understand how close they are to each other.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# now evaluate model on test data&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# now predict answers (regression) - since we only care about whole days, round all output to whole numbers&lt;/span&gt;
output_pred &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pandas&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Series(data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;lm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(input_test))
output_pred &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output_pred&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;round()

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; index, value &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; output_pred&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iteritems():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Real value: &amp;#39;&lt;/span&gt;, output_test&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values[index], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Predicted value: &amp;#39;&lt;/span&gt;, value)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        
&lt;span style=&#34;color:#75715e&#34;&gt;# should next calculate various measures such as precision, recall, etc. &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# See https://stackoverflow.com/questions/31421413/how-to-compute-precision-recall-accuracy-and-f1-score-for-the-multiclass-case&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# for some examples.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;final-notes&#34;&gt;Final notes&lt;/h2&gt;
&lt;p&gt;In order to decide which variables are meaningful in the model, methods such as back-propigation, forward-propigation or similar methods should be used.&lt;/p&gt;
&lt;p&gt;Additionally, other regression methods may work better for predicting duration - in fact the data may not even be suited for Linear Regression. In order for Linear Regression to work, certain assumptions about the data must be true. For more information see: &lt;a href=&#34;http://pareonline.net/getvn.asp?n=2&amp;amp;v=8&#34;&gt;http://pareonline.net/getvn.asp?n=2&amp;amp;v=8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also, since this data set has other elements, the inclusion of other factors may help in predicting condition duration.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>